{
  "version": 3,
  "sources": ["src/app/generated/api/configuration.ts", "src/app/generated/api/model/itemStatus.ts", "src/app/mock/mock-data.ts", "src/app/generated/api/api/item.service.ts", "src/app/generated/api/api/list.service.ts", "src/app/generated/api/encoder.ts", "src/app/generated/api/variables.ts", "src/app/generated/api/api/product.service.ts", "src/app/generated/api/api.module.ts"],
  "sourcesContent": ["import { HttpParameterCodec } from '@angular/common/http';\nimport { Param } from './param';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    /**\n     * Takes care of encoding query- and form-parameters.\n     */\n    encoder?: HttpParameterCodec;\n    /**\n     * Override the default method for encoding path parameters in various\n     * <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.\n     * <p>\n     * See {@link README.md} for more details\n     * </p>\n     */\n    encodeParam?: (param: Param) => string;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    /**\n     * Takes care of encoding query- and form-parameters.\n     */\n    encoder?: HttpParameterCodec;\n    /**\n     * Encoding of various path parameter\n     * <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.\n     * <p>\n     * See {@link README.md} for more details\n     * </p>\n     */\n    encodeParam: (param: Param) => string;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.encodeParam) {\n            this.encodeParam = configurationParameters.encodeParam;\n        }\n        else {\n            this.encodeParam = param => this.defaultEncodeParam(param);\n        }\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default OAuth2 credential\n        if (!this.credentials['OAuth2']) {\n            this.credentials['OAuth2'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n\n    private defaultEncodeParam(param: Param): string {\n        // This implementation exists as fallback for missing configuration\n        // and for backwards compatibility to older typescript-angular generator versions.\n        // It only works for the 'simple' parameter style.\n        // Date-handling only works for the 'date-time' format.\n        // All other styles and Date-formats are probably handled incorrectly.\n        //\n        // But: if that's all you need (i.e.: the most common use-case): no need for customization!\n\n        const value = param.dataFormat === 'date-time' && param.value instanceof Date\n            ? (param.value as Date).toISOString()\n            : param.value;\n\n        return encodeURIComponent(String(value));\n    }\n}\n", "/**\n * Listok API\n *\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * Status of the Item.\n */\nexport enum ItemStatus {\n    ToBuy = 'to_buy',\n    Bought = 'bought'\n}\n\n", "import { Item } from \"../generated/api/model/item\";\r\nimport { List } from \"../generated/api/model/list\";\r\nimport { ItemStatus } from \"../generated/api/model/itemStatus\";\r\n\r\nexport const ITEM_APPLES: Item = {\r\n  id: '1-1',\r\n  product: {id: 'item-1', name: 'Apples', img: 'https://images.pexels.com/photos/102104/pexels-photo-102104.jpeg'},\r\n  count: 6,\r\n  groupColor: '#4CAF50',\r\n  status: ItemStatus.ToBuy\r\n};\r\n\r\nexport const ITEM_BREAD: Item = {\r\n  id: '1-2',\r\n  product: {id: 'item-2', name: 'Bread', img: 'https://images.pexels.com/photos/209206/pexels-photo-209206.jpeg'},\r\n  count: 2,\r\n  groupColor: '#FF9800',\r\n  status: ItemStatus.Bought\r\n};\r\n\r\nexport const ITEM_MILK: Item = {\r\n  id: '1-3',\r\n  product: {id: 'item-3', name: 'Milk', img: 'https://images.pexels.com/photos/416354/pexels-photo-416354.jpeg'},\r\n  count: 1,\r\n  groupColor: '#2196F3',\r\n  status: ItemStatus.ToBuy\r\n};\r\n\r\nexport const ITEM_NOTEBOOKS: Item = {\r\n  id: '2-1',\r\n  product: {id: 'item-4', name: 'Notebooks', img: 'https://images.pexels.com/photos/159844/cellular-education-classroom-159844.jpeg'},\r\n  count: 3,\r\n  groupColor: '#9C27B0',\r\n  status: ItemStatus.ToBuy\r\n};\r\n\r\nexport const ITEM_PENS: Item = {\r\n  id: '2-2',\r\n  product: {id: 'item-5', name: 'Pens', img: 'https://images.pexels.com/photos/159832/office-supplies-stationery-equipment-159832.jpeg'},\r\n  count: 12,\r\n  groupColor: '#E91E63',\r\n  status: ItemStatus.Bought\r\n};\r\n\r\nexport const ITEM_TILES: Item = {\r\n  id: '3-1',\r\n  product: {id: 'item-6', name: 'Tiles', img: 'https://images.pexels.com/photos/534151/pexels-photo-534151.jpeg'},\r\n  count: 50,\r\n  groupColor: '#607D8B',\r\n  status: ItemStatus.ToBuy\r\n};\r\n\r\nexport const ITEM_PAINT: Item = {\r\n  id: '3-2',\r\n  product: {id: 'item-7', name: 'Paint', img: 'https://images.pexels.com/photos/1152077/pexels-photo-1152077.jpeg'},\r\n  count: 4,\r\n  groupColor: '#795548',\r\n  status: ItemStatus.ToBuy\r\n};\r\n\r\nexport const LIST_GROCERY_SHOPPING: List = {\r\n  id: '1',\r\n  name: 'Grocery Shopping',\r\n  comment: 'Weekly grocery list',\r\n  img: 'https://images.pexels.com/photos/1132047/pexels-photo-1132047.jpeg',\r\n  items: [ITEM_APPLES, ITEM_BREAD, ITEM_MILK]\r\n};\r\n\r\nexport const LIST_OFFICE_SUPPLIES: List = {\r\n  id: '2',\r\n  name: 'Office Supplies',\r\n  comment: 'Supplies needed for the home office',\r\n  img: 'https://aa-business.co.uk/wp-content/uploads/2019/10/Stationery-Supplies-min-700x553.jpg',\r\n  items: [ITEM_NOTEBOOKS, ITEM_PENS]\r\n};\r\n\r\nexport const LIST_HOME_RENOVATION: List = {\r\n  id: '3',\r\n  name: 'Home Renovation',\r\n  comment: 'Materials for bathroom renovation',\r\n  img: 'https://images.pexels.com/photos/1599791/pexels-photo-1599791.jpeg',\r\n  items: [ ITEM_TILES, ITEM_PAINT ]\r\n};\r\n\r\nexport const ALL_ITEMS: Item[] = [ITEM_APPLES, ITEM_BREAD, ITEM_MILK, ITEM_NOTEBOOKS, ITEM_PENS, ITEM_TILES, ITEM_PAINT];\r\nexport const ALL_LISTS: List[] = [ LIST_GROCERY_SHOPPING, LIST_OFFICE_SUPPLIES, LIST_HOME_RENOVATION];\r\n\r\nexport const id = function() {\r\n  return Math.random()\r\n    .toString(36)\r\n    .substring(2, 6);\r\n};\r\n", "import { Injectable } from '@angular/core';\nimport { delay, Observable, of, throwError } from 'rxjs';\nimport { ALL_ITEMS, ALL_LISTS, id as genId } from \"./mock-data\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { Configuration, Item, ItemApiServiceInterface, ItemFields, ItemStatus } from \"../generated/api\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemApiService implements ItemApiServiceInterface {\n\n  defaultHeaders: HttpHeaders = new HttpHeaders();\n  configuration: Configuration = new Configuration();\n\n  getItem(id: string): Observable<Item> {\n    let item = ALL_ITEMS.find(item => item.id === id);\n    if (item) {\n      return of(item);\n    } else {\n      return throwError(() => ({\n        status: 404,\n        message: 'Item not found'\n      }));\n    }\n  }\n\n  getItems(): Observable<Array<Item>> {\n    return of(ALL_ITEMS);\n  }\n\n  getListsItems(listId: string): Observable<Array<Item>> {\n    let items = ALL_LISTS.find(value => value.id === listId)?.items;\n    if (items) {\n      return of(items);\n    } else {\n      return throwError(() => ({\n        status: 404,\n        message: 'List not found'\n      }))\n    }\n  }\n\n  addItemToList(listId: string, itemFields: ItemFields): Observable<Item> {\n    const list = ALL_LISTS.find(l => l.id === listId);\n    if (!list) {\n      return throwError(() => ({\n        status: 404,\n        message: 'List not found'\n      }))\n    }\n\n    const newItem: Item = {\n      id: genId(),\n      product: itemFields.product!,\n      count: itemFields.count || 1,\n      groupColor: itemFields.groupColor,\n      status: itemFields.status || ItemStatus.ToBuy\n    };\n\n    list.items.push(newItem);\n    ALL_ITEMS.push(newItem);\n\n    return of({...newItem}).pipe(delay(400));\n  }\n\n  updateItem(id: string, itemData: ItemFields): Observable<Item> {\n    for (const list of ALL_LISTS) {\n      const itemIndex = list.items.findIndex(i => i.id === id);\n      if (itemIndex !== -1) {\n        let data = Object.fromEntries(Object.entries(itemData).filter(([_, v]) => v !== undefined));\n        const updatedItem = { ...list.items[itemIndex], ...data, id };\n\n        let indexInData = ALL_ITEMS.findIndex(i => i.id === id);\n        if (indexInData !== -1) {\n          ALL_ITEMS[indexInData] = updatedItem;\n        }\n\n        list.items[itemIndex] = updatedItem;\n        return of({...updatedItem}).pipe(delay(400));\n      }\n    }\n\n    return throwError(() => ({\n      status: 404,\n      message: 'Item not found'\n    }));\n  }\n\n  deleteItem(id: string): Observable<Item> {\n    for (const list of ALL_LISTS) {\n      const itemIndex = list.items.findIndex(i => i.id === id);\n      if (itemIndex !== -1) {\n        let deletedItem = list.items[itemIndex];\n        list.items.splice(itemIndex, 1);\n\n        let indexInData = ALL_ITEMS.findIndex(i => i.id === id);\n        if (indexInData !== -1) {\n          ALL_ITEMS.splice(indexInData, 1);\n        }\n\n        return of({...deletedItem}).pipe(delay(400));\n      }\n    }\n    return throwError(() => ({\n      status: 404,\n      message: 'Item not found'\n    }));\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { delay, Observable, of, throwError } from 'rxjs';\nimport { Configuration, List, ListApiServiceInterface, ListFields } from \"../generated/api\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { ALL_ITEMS, ALL_LISTS, id as genId } from \"./mock-data\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ListApiService implements ListApiServiceInterface {\n\n  defaultHeaders: HttpHeaders = new HttpHeaders();\n  configuration: Configuration = new Configuration();\n\n  createList(listData: ListFields): Observable<List> {\n    const newList: List = {\n      id: genId(),\n      name: listData.name || '',\n      comment: listData.comment,\n      img: listData.img,\n      items: []\n    };\n    ALL_LISTS.push(newList);\n    return of({...newList}).pipe(delay(400));\n  }\n\n  getList(listId: string): Observable<List> {\n    const list = ALL_LISTS.find(l => l.id === listId);\n    if (list) {\n      return of({...list}).pipe(delay(400));\n    } else {\n      return throwError(() => ({\n        status: 404,\n        message: 'Not Found'\n      }));\n    }\n  }\n\n  getLists(): Observable<Array<List>> {\n    return of([...ALL_LISTS]).pipe(delay(500));\n  }\n\n  updateList(listId: string, list: ListFields): Observable<List> {\n    const index = ALL_LISTS.findIndex(l => l.id === listId);\n    if (index === -1) {\n      return throwError(() => ({\n        status: 404,\n        message: 'Not Found'\n      }));\n    }\n\n    let data = Object.fromEntries(Object.entries(list).filter(([_, v]) => v !== undefined));\n    const updatedList = {...ALL_LISTS[index], ...data, id: listId};\n    ALL_LISTS[index] = updatedList;\n    return of({...updatedList}).pipe(delay(400));\n  }\n\n  deleteList(listId: string): Observable<List> {\n    const index = ALL_LISTS.findIndex(l => l.id === listId);\n    if (index === -1) {\n      return throwError(() => ({\n        status: 404,\n        message: 'Not Found'\n      }));\n    }\n\n    const deletedList = ALL_LISTS[index];\n    let itemIds = deletedList.items.map(item => ALL_ITEMS.indexOf(item));\n    itemIds.forEach(itemIndex => ALL_ITEMS.splice(itemIndex, 1));\n\n    ALL_LISTS.splice(index, 1);\n    return of(deletedList).pipe(delay(400));\n  }\n}\n", "import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n", "import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n", "/**\n * Listok API\n *\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ProblemDetail } from '../model/problemDetail';\n// @ts-ignore\nimport { Product } from '../model/product';\n// @ts-ignore\nimport { ProductFields } from '../model/productFields';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport {\n    ProductApiServiceInterface\n} from './product.serviceInterface';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductApiService implements ProductApiServiceInterface {\n\n    protected basePath = 'http://localhost:8080/listok/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;\n            if (firstBasePath != undefined) {\n                basePath = firstBasePath;\n            }\n\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    // @ts-ignore\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Create a new Product.\n     * Records the details of a new Product.\n     * @param productFields The Product that needs to be added or updated\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createProduct(productFields: ProductFields, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<Product>;\n    public createProduct(productFields: ProductFields, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Product>>;\n    public createProduct(productFields: ProductFields, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Product>>;\n    public createProduct(productFields: ProductFields, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {\n        if (productFields === null || productFields === undefined) {\n            throw new Error('Required parameter productFields was null or undefined when calling createProduct.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarCredential: string | undefined;\n        // authentication (OAuth2) required\n        localVarCredential = this.configuration.lookupCredential('OAuth2');\n        if (localVarCredential) {\n            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);\n        }\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/problem+json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n        let localVarTransferCache: boolean | undefined = options && options.transferCache;\n        if (localVarTransferCache === undefined) {\n            localVarTransferCache = true;\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' | 'blob' = 'json';\n        if (localVarHttpHeaderAcceptSelected) {\n            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n                responseType_ = 'text';\n            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n                responseType_ = 'json';\n            } else {\n                responseType_ = 'blob';\n            }\n        }\n\n        let localVarPath = `/products`;\n        return this.httpClient.request<Product>('post', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                body: productFields,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                transferCache: localVarTransferCache,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete an Product by ID\n     * Deletes the Product with the specified ID.\n     * @param productId The ID of the Product.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteProduct(productId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<Product>;\n    public deleteProduct(productId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Product>>;\n    public deleteProduct(productId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Product>>;\n    public deleteProduct(productId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {\n        if (productId === null || productId === undefined) {\n            throw new Error('Required parameter productId was null or undefined when calling deleteProduct.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarCredential: string | undefined;\n        // authentication (OAuth2) required\n        localVarCredential = this.configuration.lookupCredential('OAuth2');\n        if (localVarCredential) {\n            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);\n        }\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/problem+json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n        let localVarTransferCache: boolean | undefined = options && options.transferCache;\n        if (localVarTransferCache === undefined) {\n            localVarTransferCache = true;\n        }\n\n\n        let responseType_: 'text' | 'json' | 'blob' = 'json';\n        if (localVarHttpHeaderAcceptSelected) {\n            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n                responseType_ = 'text';\n            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n                responseType_ = 'json';\n            } else {\n                responseType_ = 'blob';\n            }\n        }\n\n        let localVarPath = `/products/${this.configuration.encodeParam({name: \"productId\", value: productId, in: \"path\", style: \"simple\", explode: false, dataType: \"string\", dataFormat: \"uuid\"})}`;\n        return this.httpClient.request<Product>('delete', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                transferCache: localVarTransferCache,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an Product by ID\n     * Returns a single Product.\n     * @param productId The ID of the Product.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getProduct(productId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<Product>;\n    public getProduct(productId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Product>>;\n    public getProduct(productId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Product>>;\n    public getProduct(productId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {\n        if (productId === null || productId === undefined) {\n            throw new Error('Required parameter productId was null or undefined when calling getProduct.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarCredential: string | undefined;\n        // authentication (OAuth2) required\n        localVarCredential = this.configuration.lookupCredential('OAuth2');\n        if (localVarCredential) {\n            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);\n        }\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/problem+json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n        let localVarTransferCache: boolean | undefined = options && options.transferCache;\n        if (localVarTransferCache === undefined) {\n            localVarTransferCache = true;\n        }\n\n\n        let responseType_: 'text' | 'json' | 'blob' = 'json';\n        if (localVarHttpHeaderAcceptSelected) {\n            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n                responseType_ = 'text';\n            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n                responseType_ = 'json';\n            } else {\n                responseType_ = 'blob';\n            }\n        }\n\n        let localVarPath = `/products/${this.configuration.encodeParam({name: \"productId\", value: productId, in: \"path\", style: \"simple\", explode: false, dataType: \"string\", dataFormat: \"uuid\"})}`;\n        return this.httpClient.request<Product>('get', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                transferCache: localVarTransferCache,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Lists Product\n     * Returns an array of Product.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getProducts(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<Array<Product>>;\n    public getProducts(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<Product>>>;\n    public getProducts(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<Product>>>;\n    public getProducts(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarCredential: string | undefined;\n        // authentication (OAuth2) required\n        localVarCredential = this.configuration.lookupCredential('OAuth2');\n        if (localVarCredential) {\n            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);\n        }\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/problem+json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n        let localVarTransferCache: boolean | undefined = options && options.transferCache;\n        if (localVarTransferCache === undefined) {\n            localVarTransferCache = true;\n        }\n\n\n        let responseType_: 'text' | 'json' | 'blob' = 'json';\n        if (localVarHttpHeaderAcceptSelected) {\n            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n                responseType_ = 'text';\n            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n                responseType_ = 'json';\n            } else {\n                responseType_ = 'blob';\n            }\n        }\n\n        let localVarPath = `/products`;\n        return this.httpClient.request<Array<Product>>('get', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                transferCache: localVarTransferCache,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update an Product by ID\n     * Updates the existing Product with the specified details.\n     * @param productId The ID of the Product.\n     * @param productFields The Product that needs to be added or updated\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateProduct(productId: string, productFields: ProductFields, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<Product>;\n    public updateProduct(productId: string, productFields: ProductFields, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Product>>;\n    public updateProduct(productId: string, productFields: ProductFields, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Product>>;\n    public updateProduct(productId: string, productFields: ProductFields, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {\n        if (productId === null || productId === undefined) {\n            throw new Error('Required parameter productId was null or undefined when calling updateProduct.');\n        }\n        if (productFields === null || productFields === undefined) {\n            throw new Error('Required parameter productFields was null or undefined when calling updateProduct.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarCredential: string | undefined;\n        // authentication (OAuth2) required\n        localVarCredential = this.configuration.lookupCredential('OAuth2');\n        if (localVarCredential) {\n            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);\n        }\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/problem+json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n        let localVarTransferCache: boolean | undefined = options && options.transferCache;\n        if (localVarTransferCache === undefined) {\n            localVarTransferCache = true;\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' | 'blob' = 'json';\n        if (localVarHttpHeaderAcceptSelected) {\n            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n                responseType_ = 'text';\n            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n                responseType_ = 'json';\n            } else {\n                responseType_ = 'blob';\n            }\n        }\n\n        let localVarPath = `/products/${this.configuration.encodeParam({name: \"productId\", value: productId, in: \"path\", style: \"simple\", explode: false, dataType: \"string\", dataFormat: \"uuid\"})}`;\n        return this.httpClient.request<Product>('put', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                body: productFields,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                transferCache: localVarTransferCache,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n", "import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["ItemStatus", "id", "item"]
}
