{
  "version": 3,
  "sources": ["src/app/services/auth.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User, AuthState } from '../models/auth.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private authState = new BehaviorSubject<AuthState>({\n    user: null,\n    loading: false,\n    error: null\n  });\n\n  public authState$ = this.authState.asObservable();\n\n  constructor() {\n    this.checkAuthState();\n  }\n\n  private checkAuthState(): void {\n    // For development/mock mode, simulate a logged-in user\n    if (environment.useMockData) {\n      const mockUser: User = {\n        uid: 'mock-user-123',\n        email: 'user@example.com',\n        displayName: 'Demo User',\n        photoURL: 'https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg',\n        providerId: 'mock'\n      };\n      this.authState.next({\n        user: mockUser,\n        loading: false,\n        error: null\n      });\n      localStorage.setItem('authToken', 'mock-token-123');\n    } else {\n      // In production, check for actual auth state\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        // Validate token and get user info\n        this.validateToken(token);\n      }\n    }\n  }\n\n  private validateToken(token: string): void {\n    // In production, validate the token with your auth provider\n    // For now, this is a placeholder\n  }\n\n  async signInWithGoogle(): Promise<void> {\n    this.authState.next({ ...this.authState.value, loading: true, error: null });\n    \n    try {\n      if (environment.useMockData) {\n        // Mock Google sign-in\n        const mockUser: User = {\n          uid: 'google-user-123',\n          email: 'user@gmail.com',\n          displayName: 'Google User',\n          photoURL: 'https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg',\n          providerId: 'google.com'\n        };\n        localStorage.setItem('authToken', 'google-token-123');\n        this.authState.next({ user: mockUser, loading: false, error: null });\n      } else {\n        // Implement actual Google sign-in using Firebase Auth\n        // const result = await signInWithPopup(this.auth, new GoogleAuthProvider());\n        // Handle the result\n      }\n    } catch (error: any) {\n      this.authState.next({\n        ...this.authState.value,\n        loading: false,\n        error: error.message\n      });\n    }\n  }\n\n  async signInWithGitHub(): Promise<void> {\n    this.authState.next({ ...this.authState.value, loading: true, error: null });\n    \n    try {\n      if (environment.useMockData) {\n        // Mock GitHub sign-in\n        const mockUser: User = {\n          uid: 'github-user-123',\n          email: 'user@github.com',\n          displayName: 'GitHub User',\n          photoURL: 'https://images.pexels.com/photos/614810/pexels-photo-614810.jpeg',\n          providerId: 'github.com'\n        };\n        localStorage.setItem('authToken', 'github-token-123');\n        this.authState.next({ user: mockUser, loading: false, error: null });\n      } else {\n        // Implement actual GitHub sign-in using Firebase Auth\n        // const result = await signInWithPopup(this.auth, new GithubAuthProvider());\n        // Handle the result\n      }\n    } catch (error: any) {\n      this.authState.next({\n        ...this.authState.value,\n        loading: false,\n        error: error.message\n      });\n    }\n  }\n\n  async signInWithApple(): Promise<void> {\n    this.authState.next({ ...this.authState.value, loading: true, error: null });\n    \n    try {\n      if (environment.useMockData) {\n        // Mock Apple sign-in\n        const mockUser: User = {\n          uid: 'apple-user-123',\n          email: 'user@icloud.com',\n          displayName: 'Apple User',\n          photoURL: 'https://images.pexels.com/photos/1043471/pexels-photo-1043471.jpeg',\n          providerId: 'apple.com'\n        };\n        localStorage.setItem('authToken', 'apple-token-123');\n        this.authState.next({ user: mockUser, loading: false, error: null });\n      } else {\n        // Implement actual Apple sign-in using Firebase Auth\n        // const result = await signInWithPopup(this.auth, new OAuthProvider('apple.com'));\n        // Handle the result\n      }\n    } catch (error: any) {\n      this.authState.next({\n        ...this.authState.value,\n        loading: false,\n        error: error.message\n      });\n    }\n  }\n\n  async signOut(): Promise<void> {\n    this.authState.next({ ...this.authState.value, loading: true });\n    \n    try {\n      localStorage.removeItem('authToken');\n      this.authState.next({ user: null, loading: false, error: null });\n    } catch (error: any) {\n      this.authState.next({\n        ...this.authState.value,\n        loading: false,\n        error: error.message\n      });\n    }\n  }\n\n  getCurrentUser(): User | null {\n    return this.authState.value.user;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.authState.value.user;\n  }\n}"],
  "mappings": "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",
  "names": []
}
